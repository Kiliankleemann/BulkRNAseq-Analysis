###---------------------------------FILE PREPARATION----------------------------------##
## useMart is a function used to connect to the selected BioMart database and dataset (ListEnsemblArchives() to list host sites)
ensembl_ms_mart <- useMart(biomart="ensembl", dataset="mmusculus_gene_ensembl")
## getBM is a function used to retrieve information from the BioMart database
ensembl_df <- getBM(attributes = c("ensembl_transcript_id_version", "ensembl_gene_id_version", "external_gene_name"), mart = ensembl_ms_mart) %>%
  as_tibble() %>%
  mutate(noVersion = sub('\\..*', '', ensembl_transcript_id_version))

# Build tx2gene table from ensembl_df
tx2gene <- ensembl_df %>%
  select(noVersion, external_gene_name) %>%
  rename(c('Transcript' = "noVersion" , "Gene" = "external_gene_name" )) %>%
  data.frame()

## Create a metadata map using your metadata file.
metadata <- read.xlsx("metadata.xlsx", sheet = 1)
sample_data <- data.frame(position = metadata$Well, genotype = metadata$Genotype, gender = metadata$Gender,treatment = metadata$Treatment, batch = metadata$cohort)
# Outlier filtering  and subsetting(if necessary)
outliers = c('A09', 'A12')                                #QC Failed   
sample_data <- sample_data %>%            # Filter sample_data sheet
  filter(!Position %in% outliers)

#Analyzis parameters
file_prefix = 'All_data_(batch_correction)_'
experiment = sample_data

## List all directories containing data
#*** All the gene quantification files are in the folder "quant_files", make sure metafile sample order matches order of quant files.
all_files <- list.files("./data", full.names = T, pattern=NULL, all.files=FALSE)
quant_files <- file.path(all_files, "quant.sf")

position_list <- paste0(experiment$Position, collapse = '|')
sample_files <- grep(position_list, quant_files, value = TRUE)


## QC check - Order of metafile samples must match quant file order!  Fix metadata file if not!
all(file.exists(quant_files))
sample_files


# Import Transcript quantification files
txi<-tximport(files=sample_files,type="salmon", tx2gene = tx2gene, ignoreTxVersion = T)

## Look at the counts and set the counts as a matrix file.
txicounts<-as.matrix(txi$counts)
mode(txicounts) <- 'integer'

#Batch Correction
count_batch <- sample_data$batch
count_adjusted <- ComBat_seq(txicounts, batch = count_batch, group = NULL)
tpm_adjusted <- ComBat_seq(txi$abundance, batch = count_batch, group = NULL)


#-----------------------------------ANALYSIS---------------------------------#
## Create DESeq2Dataset object with variables of interest.
#dds <- DESeqDataSetFromTximport(txi, colData = experiment, design = ~ phag * genotype * treatment + gender)
dds <- DESeqDataSetFromMatrix(count_adjusted, colData = experiment , design =~ phag * genotype * treatment + gender)

#prefiltering on minimum of 5 reads (NOT REQUIRED AS DESEQ2 OPTIMIZES AND FILTERS AUTOMATICALLY)
dds <- estimateSizeFactors(dds)
idx <- rowMeans(counts(dds, normalized = TRUE)) >= 5
dds <- dds[idx,]

#Setting the reference level (control group to compare against)
#dds@colData@listData$treatment <- relevel(dds@colData@listData$treatment, ref = "wt")

## Run DESeq analysis to gather differential expression results
#Run DESeq (LRT)
dds_run <- DESeq(dds, test = 'LRT', reduced = ~ 1)
# Run DESeq (Wald)
#dds_run <- DESeq(dds, betaPrior = F)

# View names of estimated effects
resultsNames(dds_run)

# Create table of effects showing log2fold, standard error, test stats, and p-vals
# LRT
dds_result <- results(dds_run, pAdjustMethod = 'BH', independentFiltering = T, cooksCutoff = T)
# Wald
#dds_result <- results(dds_run, contrast = c('condition','KO', 'WT'), independentFiltering = T, pAdjustMethod = 'BH')
#dds_result <- lfcShrink(dds_run, contrast = c('genotype', 'KO', 'WT'), res = dds_result, type = 'normal')
dds_result

summary(dds_result, alpha = 0.05)


## View Total number of normalized counts per sample
dds_run <- estimateSizeFactors(dds_run)
DS_norm_counts <- counts(dds_run, normalized = TRUE)
colSums(DS_norm_counts)

## Plot dispersion estimates
plotDispEsts(dds_run)

#plotCounts(dds_run, 'Fus', intgroup = 'condition')

# Transform counts for data visualization
vst <- vst(dds_run, blind=TRUE)

# Plot PCA 
plotPCA(vst, intgroup=c('phag'))

# Add nametags
z <- plotPCA(vst, intgroup=c('phag','genotype', 'treatment'))
z + geom_label(aes(label = experiment$Position))
theme<-theme(aspect.ratio = 1, panel.background = element_blank(),panel.border=element_rect(fill=NA),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),strip.background=element_blank(),axis.text.x=element_text(colour="black"),axis.text.y=element_text(colour="black"),axis.ticks=element_line(colour="black"),plot.margin=unit(c(1,1,1,1),"line"))
dev.off()
pdf(file = paste0('plots/PCA_', file_prefix, 'phag_genotype_treatment.pdf'), pointsize = 10)
z + geom_label(aes(label = experiment$Position))+
  #geom_point() + 
  theme 
dev.off()

#Filter unwated genes
unwanted_genes = paste(c('^Gm', '^mt-', '^Vmn', '^Rpl', '^Rps', '^Olfr','Rik$'), collapse = '|')

# Build significant gene table and extract list of sorted DE genes.
sig_res <- dds_result %>%
  data.frame() %>%
  rownames_to_column(var='gene') %>%    # makes a 'gene' column using column1
  as_tibble %>%
  filter(pvalue < 0.05) %>%
  arrange(pvalue) %>% 
  filter(!str_detect(gene, unwanted_genes))

sorted_DEGenes <- sig_res$gene

# Export significant gene count data
name_list <- c('gene', (paste0(dds_run$Position, "_", dds_run$genotype, "_", dds_run$treatment, "_", dds_run$gender)))
name_list

sig_export <- DS_norm_counts %>%
  data.frame() %>%
  rownames_to_column(var = 'gene') %>%
  as_tibble() %>%
  `colnames<-`(name_list) %>%
  semi_join(sig_res) %>%
  dplyr::slice(match(sorted_DEGenes, gene)) %>%
  filter(!str_detect(gene, unwanted_genes)) 

# Column Names
check_cols <- c(colnames(sig_export))

# #Manual Reordering of Columns (if necessary)
reordered_index <- c(
  grep("xxxxx", names(sig_export), ignore.case = T)
)

sig_export <- sig_export %>% 
  select(c(1, reordered_index))

# Column Names
check_cols <- c(colnames(sig_export))
check_cols

# Normalized counts
check_counts <- DS_norm_counts %>%
  as.data.frame() %>%
  rownames_to_column('gene') %>%
  as_tibble %>%
  `colnames<-`(check_cols) %>%
  filter(!str_detect(gene, unwanted_genes))

# Results
check_res <- dds_result %>%
  as.data.frame() %>%
  rownames_to_column('gene') %>%
 filter(!str_detect(gene, unwanted_genes))

#TPM File
# my_genes <- rownames(txi$abundance)
# my_genes_ann <- ensembl_df[match(my_genes,ensembl_df$external_gene_name),]
# test_TPM <- cbind(my_genes_ann$external_gene_name,txi$abundance) %>%
#   as.data.frame() %>%
#   as_tibble() %>%
#   `colnames<-`(check_cols)

test_TPM <- tpm_adjusted %>%
  as.data.frame() %>%
  rownames_to_column('gene') %>%
  `colnames<-`(check_cols)

# Output files
write.xlsx(sig_export, file = paste0('results/', file_prefix, 'DEGene_counts_pval05.xlsx'), overwrite = T)
write.xlsx(check_res, file = paste0('results/', file_prefix, 'statistics.xlsx'), overwrite = T)
write.xlsx(check_counts, file = paste0('results/', file_prefix, 'DS_counts.xlsx'), overwrite = T)
write.xlsx(sig_res, file = paste0('results/', file_prefix, 'DEGene_statistics_pval05.xlsx'), overwrite = T)
write.xlsx(test_TPM,file = paste0('results/', file_prefix, 'TPM.xlsx'), overwrite = T)
